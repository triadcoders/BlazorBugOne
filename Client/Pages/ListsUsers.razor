@using System.Net.Http.Json
@using BlazorBugOne.Shared;
@using System.Threading;
@inject ISnackbar Snackbar

@inject HttpClient httpClient
@inject NavigationManager NavigationManager


@page "/ListUsers"





<MudTable Items="@people" Hover="true" SortLabel="Sort By" Dense=true CommitEditTooltip="Save">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.id)">User Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.firstname)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.lastname)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.usertype)">User Level</MudTableSortLabel></MudTh>
        <MudTh>Edit</MudTh>
        <MudTh>Delete</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd @onclick="@(() => EditPerson(@context))" DataLabel="personid">@context.id</MudTd>
        <MudTd DataLabel="firstname">@context.firstname</MudTd>
        <MudTd DataLabel="lastname">@context.lastname</MudTd>
        <MudTd DataLabel="usertype">@context.usertype </MudTd>

        <MudTd><MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditPerson(context))">Edit</MudButton></MudTd>
        <MudTd><MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => Delete(context))">Delete</MudButton></MudTd>


    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

@*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>*@
@*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable Admin Mode</MudSwitch>*@
@*<MudSwitch @onclick="() => FixToggle(enabled.ToString())" @bind-Checked="@enabled" Color="Color.Info" Label="@(!enabled ? "User Mode" : "Admin Mode")" />*@



@code { //  List<Person> people = new();



    private EventCallback<ICollection<Person>> TableChanged { get; set; }



    private IEnumerable<Person> people = new List<Person>();


    protected override async Task OnInitializedAsync()
    {
        await UpDatePeople();
    }



    protected private async Task UpDatePeople()
    {
        //    httpClient = new();
        people = await httpClient.GetFromJsonAsync<List<Person>>("BugManage/GetPeople");

        foreach (var item in people)
        {
            if (item.id > 0)
            {
                Console.WriteLine("Person name is " + item.firstname);
            }
        }
    }


    private void EditPerson(Person person)
    {
        // await TableChanged.InvokeAsync(bugs);
        //alert = "WeeeWooo WeeeWooo " + bug.id;
        NavigationManager.NavigateTo("/EditUser/" + person.id);
    }


    private async Task Delete(Person person)
    {
        var result = await httpClient.PostAsJsonAsync("BugManage/DeletePerson", person);

        Console.WriteLine(result);
        await UpDatePeople();

    }


    }
