@using System.Net.Http.Json
@using BlazorBugOne.Shared;
@using System.Threading;

@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService




    @page "/ListUsers"





    <MudTable Items="@people" Hover="true" SortLabel="Sort By" Dense=true CommitEditTooltip="Save">

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.id)">User Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.firstname)">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.lastname)">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.usertype)">User Level</MudTableSortLabel></MudTh>
            <MudTh>Edit</MudTh>
            <MudTh>Delete</MudTh>

        </HeaderContent>



        <RowTemplate>
            <MudTd @onclick="@(() => EditPerson(@context))" DataLabel="personid">@context.id</MudTd>
            <MudTd DataLabel="firstname">@context.firstname</MudTd>
            <MudTd DataLabel="lastname">@context.lastname</MudTd>
            <MudTd DataLabel="usertype">@context.usertype </MudTd>

            <MudTd><MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditPerson(context))">Edit</MudButton></MudTd>
            <MudTd><MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => Delete(context))">Delete</MudButton></MudTd>


        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>

    @*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>*@
    @*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable Admin Mode</MudSwitch>*@
    @*<MudSwitch @onclick="() => FixToggle(enabled.ToString())" @bind-Checked="@enabled" Color="Color.Info" Label="@(!enabled ? "User Mode" : "Admin Mode")" />*@

    <MudButton @onclick="DeleteUser" Variant="Variant.Filled" Color="Color.Error">Delete Records</MudButton>


    @code { //  List<Person> people = new();



        private EventCallback<ICollection<Person>> TableChanged { get; set; }



        private IEnumerable<Person> people = new List<Person>();


        protected override async Task OnInitializedAsync()
        {
            await UpDatePeople();
        }



        protected private async Task UpDatePeople()
        {
            //    httpClient = new();
            people = await httpClient.GetFromJsonAsync<List<Person>>("BugManage/GetPeople");

            foreach (var item in people)
            {
                if (item.id > 0)
                {
                    Console.WriteLine("Person name is " + item.firstname);
                }
            }
        }


        private void EditPerson(Person editPerson)
        {
            // await TableChanged.InvokeAsync(bugs);
            //alert = "WeeeWooo WeeeWooo " + bug.id;
            NavigationManager.NavigateTo("/EditUser/" + editPerson.id);
        }

        private void DeleteUser()
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
            parameters.Add("ButtonText", "Delete");
            parameters.Add("Color", Color.Error);

            var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall

            };
            DialogService.Show<DialogDelete>("Delete", parameters, options);

            
        }


        private async Task Delete(Person deletePerson)
        {
            Snackbar.Add("Trying to delete...");

            DeleteUser();
            //  var result = await httpClient.PostAsJsonAsync("BugManage/DeletePerson", deletePerson);

            //   Console.WriteLine(result);
            await UpDatePeople();

            //Snackbar.Add(result.ToString());

        } }
