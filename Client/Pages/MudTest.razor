@using BlazorBugOne.Shared;
@inject HttpClient Http

@page "/MudTest"
@page "/MudTest/{bugid}"

@*<MudText Typo="Typo.h6">MudBlazor is @Text</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ButtonOnClick">@ButtonText</MudButton>

    <MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert>*@

<h1>Ultra Bug Tracker 2000 X Mega Extreme Ulitmate Edition  v1.0</h1>

<MudCard>
    <MudCardContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" @bind-Text="summaryText" Label="Bug Summary" Required="true" RequiredError="Bug summary is required!" />
            <MudTextField T="string" @bind-Text="@detailsText" Label="Detail description" Required="false" RequiredError="Details recommended!" />
            @*<MudTextField T="string" Label="Who Discovered" RequiredError="Person is required" />*@

            <MudSelect T="string" @bind-Text="@firstname" Label="Who Discovered" RequiredError="Person is required">

                <MudSelectItem Value="@("Bob")" />
                <MudSelectItem Value="@("Mike")" />
                <MudSelectItem Value="@("Dork")" />
                <MudSelectItem Value="@("Pig")" />
            </MudSelect>



            <MudSelect T="string" @bind-Text="@assignedTo" Label="Assigned To">
                <MudSelectItem Value="@("Bob")" />
                <MudSelectItem Value="@("Mike")" />
                <MudSelectItem Value="@("Dork")" />
                <MudSelectItem Value="@("Pig")" />
            </MudSelect>



            <MudItem xs="12" sm="6" md="4">
                <MudDatePicker Label="Date Discovered" @bind-Date="discoverydate" />
            </MudItem>

            <MudSelect T="string" @bind-Text="@projectText" Label="Project">
                <MudSelectItem Value="@("Movie Inventory Program")" />
                <MudSelectItem Value="@("In Stock Alert Program")" />
                <MudSelectItem Value="@("The Blogging PRogram ")" />
                <MudSelectItem Value="@("The Best Ever Video Game")" />
            </MudSelect>


            <MudSelect T="string" @bind-Text="@lifeCycleText" Label="Life Cycle">
                <MudSelectItem Value="@("Open")" />
                <MudSelectItem Value="@("In Progress")" />
                <MudSelectItem Value="@("Not a Bug")" />
                <MudSelectItem Value="@("Not reproducible")" />
                <MudSelectItem Value="@("Missing Information")" />
                <MudSelectItem Value="@("Pushed Back")" />
                <MudSelectItem Value="@("Ready for next release")" />
                <MudSelectItem Value="@("Ready for next retest")" />
                <MudSelectItem Value="@("Fix not confirmed")" />
                <MudSelectItem Value="@("Closed")" />
                <MudSelectItem Value="@("Fixed")" />
                <MudSelectItem Value="@("On Hold")" />
                <MudSelectItem Value="@("Duplicate bug")" />
            </MudSelect>


            <div class="d-flex">
                <MudRadioGroup T="string" @bind-SelectedOption="@priorityText" Required="true" RequiredError="Priority">
                    <MudRadio Option="@("Low")">Low</MudRadio>
                    <MudRadio Option="@("Medium")">Medium</MudRadio>
                    <MudRadio Option="@("High")">High</MudRadio>
                    <MudRadio Option="@("Urgent")">Urgent</MudRadio>
                </MudRadioGroup>
            </div>

            @*<MudItem xs="12" sm="6" md="4">
                    <MudDatePicker Label="Target Resolution Date" @bind-Date="resolutiondate" />
                </MudItem>*@



            @*<MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" @bind-Text="@progressReport" Label="Progress Report" Variant="Variant.Text"  Lines="5" />
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" @bind-Text="@resolutionText"  Label="Resolution Summary" Variant="Variant.Text"  Lines="5" />
                </MudItem>*@






            @*<MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                Label="I agree that MudBlazor is awesome!" />*@
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        @*<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Submit Bug</MudButton>*@
        <MudButton Variant="Variant.Filled" OnClick="SubmitBug" Color="Color.Primary" Class="ml-auto">Submit Bug</MudButton>
    </MudCardActions>




</MudCard>

@*@if (resultstring != null)
    {
        <h1>@resultstring</h1>

    }else
                {
                    <h1>Result String is null</h1>
                }*@



@code {
    //https://www.donedone.com/blog/bug-tracking-template
    bool success;


    string reportText = "NA";
    string summaryText = "NA";
    string detailsText = "NA";
    DateTime? discoverydate = DateTime.Today;
    DateTime? resolutiondate = DateTime.Today;
    string progressReport = "NA";
    string projectText = "NA";
    string firstname = "NA";
    string assignedTo = "NA";
    string[] errors = { };
    string resultstring = "NA";
    string resolutionText = "NA";
    string priorityText = "NA";
    string lifeCycleText = "NA";

    [Parameter]
    public string bugid { get; set; }


    //  HttpResponseMessage result;
    //    MudTextField<string> pwField1;
    MudForm form;
    Bug bug = new();




    public string Text { get; set; } = "????";
    public string ButtonText { get; set; } = "Click Me";
    public int ButtonClicked { get; set; }

    void ButtonOnClick()
    {
        ButtonClicked += 1;
        Text = $"Awesome x {ButtonClicked}";
        ButtonText = "Click Me Again";
    }




    protected override async Task OnInitializedAsync()
    {


        // var result2 = await Http.PostAsJsonAsync("BugManage/GetBug/" + bugid, bug);

        if (bugid != null)
        {
            Bug newbug = await Http.GetFromJsonAsync<Bug>("BugManage/GetBug/" + bugid);

            summaryText = newbug.summary;
        }

    }


    private async Task SubmitBug()
    {
        // summaryText = "Submitted";


        bug.created = discoverydate.Value;
        bug.summary = summaryText;

        //      bug.progressreport = progressReport;
        //       bug.resolutionsummary = resolutionText;

        Project project = new();
        project.name = projectText;
        bug.project = project;

        Person person = new Person();
        person.firstname = firstname;
        bug.person = person;


        Person assignee = new();
        assignee.firstname = assignedTo;
        bug.assignedto = assignee;


        bug.priority = priorityText;
        bug.lifecycle = lifeCycleText;



        // bug.id = 54;

        var result = await Http.PostAsJsonAsync("BugManage/MakePostAgain", bug);
        //    resultstring = await result.Content.ReadAsStringAsync();
        //    resultstring = result.StatusCode.ToString();

        //  Console.WriteLine("Bug Person is " + bug.person.firstname);
        //  summaryText = resultstring;

        // Console.WriteLine("Status code again is " + resultstring);

        this.StateHasChanged();

    }

}