@using BlazorBugOne.Shared;
@inject HttpClient Http
@using System.Threading;
@inject ISnackbar Snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations


@page "/SubmitBug"
@page "/SubmitBug/{bugid}"

@*<MudText Typo="Typo.h6">MudBlazor is @Text</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ButtonOnClick">@ButtonText</MudButton>

    <MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert>*@

<h1>The Bug Tracker</h1>

@if (selecteduser != null)
{
    <h1>Selected User Id is @selecteduser</h1>
}
else
{
    <h1>No user selected yet</h1>
}



<MudCard>
    <MudCardContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            @*<MudTextField Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" HelperText="Max. 50 characters" T="string" @bind-Text="summaryText" Label="Bug Summary" Required="true" RequiredError="Bug summary is required!" />*@
            <MudTextField Validation="@(new Func<string, string>(CheckLength))" HelperText="Max. 50 characters" T="string" @bind-Text=summaryText Label="Bug Summary" Required="true" RequiredError="Bug summary is required!" />



            <MudTextField T="string" @bind-Text="@detailsText" Label="Detail description" Required="false" RequiredError="Details recommended!" />
            @*<MudTextField T="string" Label="Who Discovered" RequiredError="Person is required" />*@

            <MudSelect T="string" @bind-Text="@selecteduser" Label="Who Discovered" RequiredError="Person is required">

                @*<MudTd DataLabel="usertype">@context.usertype </MudTd>*@


                @if (peeps != null)
                {
                    foreach (var item in peeps)
                    {
                        <MudSelectItem Value=@item.id.ToString()>@item.firstname @item.lastname</MudSelectItem>
                    }
                }

                <MudSelectItem OnClick="@(() => FireMessage())" Value=@unassignedUser.id.ToString()> Unassigned </MudSelectItem>


            </MudSelect>

            @*<MudTd><MudButton Disabled="@enabled" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteBug(context))">Delete</MudButton></MudTd>*@

            <MudItem xs="12" sm="6" md="4">

                <MudSelect T="string" @bind-Text="@assignedTo" Label="Assigned To">


                    @if (peeps != null)
                    {
                        foreach (var item in peeps)
                        {
                            <MudSelectItem Value=@item.id.ToString()>@item.firstname @item.lastname</MudSelectItem>
                        }
                    }

                    <MudSelectItem  OnClick="@(() => FireMessage())" Value=@unassignedUser.id.ToString()> Unassigned </MudSelectItem>
                </MudSelect>

            </MudItem>


            <MudItem xs="6" sm="6" md="4">
                <MudDatePicker Label="Date Discovered" @bind-Date="discoverydate" />
                <MudSelect T="string" @bind-Text="@projectText" Label="Project">
                    <MudSelectItem Value="@("Movie Inventory Program")" />
                    <MudSelectItem Value="@("In Stock Alert Program")" />
                    <MudSelectItem Value="@("The Blogging PRogram ")" />
                    <MudSelectItem Value="@("The Best Ever Video Game")" />
                </MudSelect>
            </MudItem>


            <MudItem xs="6" sm="3" md="2">
                <MudSelect T="string" @bind-Text="@lifeCycleText" Label="Life Cycle">
                    <MudSelectItem Value="@("Open")" />
                    <MudSelectItem Value="@("In Progress")" />
                    <MudSelectItem Value="@("Not a Bug")" />
                    <MudSelectItem Value="@("Not reproducible")" />
                    <MudSelectItem Value="@("Missing Information")" />
                    <MudSelectItem Value="@("Pushed Back")" />
                    <MudSelectItem Value="@("Ready for next release")" />
                    <MudSelectItem Value="@("Ready for next retest")" />
                    <MudSelectItem Value="@("Fix not confirmed")" />
                    <MudSelectItem Value="@("Closed")" />
                    <MudSelectItem Value="@("Fixed")" />
                    <MudSelectItem Value="@("On Hold")" />
                    <MudSelectItem Value="@("Duplicate bug")" />
                </MudSelect>
            </MudItem>


            <div class="d-flex">
                <MudRadioGroup T="string" @bind-SelectedOption="@priorityText" Required="true" RequiredError="Priority">
                    <MudRadio Option="@("Low")">Low</MudRadio>
                    <MudRadio Option="@("Medium")">Medium</MudRadio>
                    <MudRadio Option="@("High")">High</MudRadio>
                    <MudRadio Option="@("Urgent")">Urgent</MudRadio>
                </MudRadioGroup>
            </div>

            @*<MudItem xs="12" sm="6" md="4">
            <MudDatePicker Label="Target Resolution Date" @bind-Date="resolutiondate" />
        </MudItem>*@



            @*<MudItem xs="12" sm="12" md="12">
            <MudTextField T="string" @bind-Text="@progressReport" Label="Progress Report" Variant="Variant.Text"  Lines="5" />
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            <MudTextField T="string" @bind-Text="@resolutionText"  Label="Resolution Summary" Variant="Variant.Text"  Lines="5" />
        </MudItem>*@






            @*<MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
        Label="I agree that MudBlazor is awesome!" />*@


        </MudForm>
    </MudCardContent>
    <MudCardActions>
        @*<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Submit Bug</MudButton>*@
        <MudButton Variant="Variant.Filled" OnClick="BugSubmit" Color="Color.Primary" Class="ml-auto">Submit Bug</MudButton>
    </MudCardActions>




</MudCard>

@*@if (resultstring != null)
    {
        <h1>@resultstring</h1>

    }
    else
    {
        <h1>Result String is null</h1>
    }*@

<h1>BUGID: @bugid</h1>

@code { //https://www.donedone.com/blog/bug-tracking-template
    bool success;

    Bug thebug = new();

    int MAX_TEXT_COUNT = 50;
    string selecteduser;
    string assignedTo;
    Person unassignedUser;

    string fart = "FART";

    string reportText = "NA";
    string summaryText = "NA";
    string detailsText = "NA";
    DateTime? discoverydate = DateTime.Today;
    DateTime? resolutiondate = DateTime.Today;
    string progressReport = "NA";
    string projectText = "NA";
    string firstname = "NA";
    string lastname = "NA";

    string[] errors = { };
    string resultstring = "";
    string resolutionText = "NA";
    string priorityText = "NA";
    string lifeCycleText = "NA";
    List<Person> peeps = new();

    [Parameter]
    public string bugid { get; set; }

    //FluentValidationValidator<string> ccValidator = new FluentValueValidator<string>(x => x.NotEmpty().Length(1, 100).CreditCard());
    //FluentValidationValidator cc = new();




    //  HttpResponseMessage result;
    //    MudTextField<string> pwField1;
    MudForm form;

    //  Bug bug = new();
    // The validation rules (overkill, I know, but very fluent):
    // The validation rules (overkill, I know, but very fluent):


    public string Text { get; set; } = "????";
    public string ButtonText { get; set; } = "Click Me";
    public int ButtonClicked { get; set; }



    private string CheckLength(string length)
    {
        if (length.Count() > 50 )
        {
            return "Please keep the summary to 50 characters or less, if you need to add more details use the details field";
        }
        return null;
    }


    void ButtonOnClick()
    {


        ButtonClicked += 1;
        Text = $"Awesome x {ButtonClicked}";
        ButtonText = "Click Me Again";

    }


    Bug newbug;
    Person discoverdPerson;
    Person assignedtoperson;




    protected override async Task OnInitializedAsync()
    {


        FireMessage();
        unassignedUser = new();
        peeps = await Http.GetFromJsonAsync<List<Person>>("BugManage/GetPeople/");

        if (bugid != null)
        {
            //Snackbar.Add("bug id is " + bugid);
            newbug = await Http.GetFromJsonAsync<Bug>("BugManage/GetBug/" + bugid);


            //This is the user that discovered the bug.
            if (newbug?.personDiscovered != null)
            {
                discoverdPerson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + newbug.personDiscovered.id);  //we have the original bug id here
                                                                                                                             //   person = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + selecteduser);
                newbug.personDiscovered = discoverdPerson;
                selecteduser = discoverdPerson.id.ToString();

                //Snackbar.Add("the discoveredPerson newbug is " + newbug?.personDiscovered?.firstname ?? "discovered.firstname is null");
                Console.WriteLine("The discoveredPerson is " + newbug?.personDiscovered?.firstname ?? "discovered.firstname is null");

            }
            else
            {
                //   Snackbar.Add("the discovredPerson newbug is null");
                Console.WriteLine("The newbug.personDiscovered is null");
            }

            //This is the user that is assigned to the bug.
            if (newbug?.personAssigned != null)
            {
                assignedtoperson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + newbug.personAssigned.id);  //we have the original bug id here
                                                                                                                            //    assignedtoperson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + assignedTo);
                newbug.personAssigned = assignedtoperson;
                assignedTo = assignedtoperson.id.ToString();
                //  Snackbar.Add("the selected newbug assignee is " + newbug?.personAssigned?.firstname ?? "assigned.firstname is null");

            }
            else
            {
                //  Snackbar.Add("the selected assignee person is null");
            }


            summaryText = newbug?.summary ?? "missing summary";
            detailsText = newbug?.description ?? "missing description";
            projectText = newbug?.project?.name ?? "missing project";
            firstname = newbug?.personAssigned?.firstname ?? "missing personAssigned";
            priorityText = newbug?.priority;
            lifeCycleText = newbug?.lifecycle;


        }
    }


    private void FireMessage()
    {
        //Snackbar.Add("Fired!!");
    }

    private void EditConteEdixt_OnFieldChanged(object sender,
         FieldChangedEventArgs e)
    {
        Console.WriteLine(e.FieldIdentifier.FieldName);
        FireMessage();

    }





    private async Task BugSubmit()
    {
        if (newbug == null) newbug = new();
        Console.WriteLine("The newbug id is " + newbug.id);
        Snackbar.Add("The selected user is " + selecteduser);
        Console.WriteLine("SubmitBug.razor: BugSumbit(): selecteduser= " + selecteduser);



        // if (selecteduser == "0") { selecteduser = null; Snackbar.Add("trying to set user to null."); } //If the user cannot be found or its the unnassigned user, lets make it null.


        if (selecteduser == "0" || selecteduser == null) {
            newbug.personDiscovered = null;
            Snackbar.Add("trying to set user to null.");
        } //If the user cannot be found or its the unnassigned user, lets make it null.




        //This is the user that discovered the bug
        if (selecteduser != "0" && selecteduser != null)
        {

            Console.WriteLine("the selected user exist so we are attempting to pull user from api:" +selecteduser);
            discoverdPerson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + selecteduser); //we want to update the person from the html selection
                                                                                                          //    newbug.personDiscovered = discoverdPerson;
            newbug.personDiscovered = discoverdPerson;
            //   Snackbar.Add("The discoveredPErson is beign added to newbug " + discoverdPerson.firstname);
        }



        //     if (assignedTo == "0") { assignedTo = null; } //If the user cannot be found or its the unnassigned user, lets make it null.
        if (assignedTo == "0" || assignedTo == null) { newbug.personAssigned = null; } //If the user cannot be found or its the unnassigned user, lets make it null.


        //This is the user that is assigned to the bug.
        if (assignedTo != "0" && assignedTo != null)
        {

            if (assignedtoperson == null) assignedtoperson = new();

            Console.WriteLine("Attempting to get person from api with id of:" + assignedTo);
            assignedtoperson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + assignedTo); //we want to update the assignedperson from the html selection                                                                                                      //     newbug.personAssigned = assignedtoperson;


            newbug.personAssigned = assignedtoperson;

        }


        newbug.created = discoverydate.Value;


        if (discoverydate.Value.Ticks > DateTime.Now.Ticks)
        {
            Snackbar.Add("Not setting time to the future, Future Boy.");
            discoverydate = DateTime.Now;
        }
        else
        {
            //    Snackbar.Add("Ticks are" + discoverydate.Value.Ticks.ToString());
            //  Snackbar.Add("Ticks are" + DateTime.Now.Ticks.ToString());
        }



        newbug.description = detailsText;
        newbug.summary = summaryText;
        // newbug.status = priorityText;
        newbug.lifecycle = lifeCycleText;

        Project project = new Project();
        project.name = projectText;
        newbug.project = project;
        newbug.priority = priorityText;

        //Snackbar.Add("newbug person is " + newbug.personAssigned.id);
        //Snackbar.Add("newbug assignee is " + newbug.personAssigned.id);


        // Snackbar.Add("Submitting bug with assignedto firstname is: " + newbug?.personDiscovered?.firstname ?? "No user discovered this bug");
        //  Snackbar.Add("Submitting bug with selecteduser firstname is: " + newbug?.personAssigned?.firstname ?? "No person was assigned to this bug");

        Console.WriteLine("Submitting bug with assignedto firstname is: " + newbug?.personDiscovered?.firstname ?? "No user discovered this bug");
        Console.WriteLine("Submitting bug with selecteduser firstname is: " + newbug?.personAssigned?.firstname ?? "No person was assigned to this bug");

        Console.WriteLine("summary is newbug " + newbug.summary);



        Snackbar.Add("Atempting to submit the bug " + newbug.summary);

        Console.WriteLine("The newbug id right before posting to api is " + newbug.id);

        if (newbug.personAssigned == null) { Console.WriteLine("its null dude"); }

        Console.WriteLine("The newbug selected discovred" + newbug.personAssigned ?? " NULL");
        Console.WriteLine("The newbug selected discovred" + newbug.personDiscovered ?? " NULL");
        Console.WriteLine("The newbug.id is " + newbug.id);
        var result = await Http.PostAsJsonAsync("BugManage/MakePostAgain", newbug);
        //    resultstring = await result.Content.ReadAsStringAsync();
        resultstring = result.StatusCode.ToString();

        if (resultstring == "OK")
        {
            Snackbar.Add("Success!");
        }


        this.StateHasChanged();

    }






}