@using BlazorBugOne.Shared;
@inject HttpClient Http
@using System.Threading;
@inject ISnackbar Snackbar



@page "/SubmitBug"
@page "/SubmitBug/{bugid}"
@*<MudText Typo="Typo.h6">MudBlazor is @Text</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ButtonOnClick">@ButtonText</MudButton>

    <MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert>*@

<h1>Ultra Bug Tracker 2000 X Mega Extreme Ultimate Edition  v1.0</h1>

@if (selecteduser !=null)
{
  <h1>Selected User Id is @selecteduser</h1>
}else{
<h1>No user selected yet</h1>
}

<MudCard>
    <MudCardContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" @bind-Text="summaryText" Label="Bug Summary" Required="true" RequiredError="Bug summary is required!" />
            <MudTextField T="string" @bind-Text="@detailsText" Label="Detail description" Required="false" RequiredError="Details recommended!" />
            @*<MudTextField T="string" Label="Who Discovered" RequiredError="Person is required" />*@

           <MudSelect T="string" @bind-Text="@selecteduser" Label="Who Discovered" RequiredError="Person is required">

            @*<MudTd DataLabel="usertype">@context.usertype </MudTd>*@


            @if (peeps != null)
            {
            foreach ( var item in peeps )
            {
            <MudSelectItem Value=@item.id.ToString()>@item.firstname @item.lastname</MudSelectItem>
            }
            }



        </MudSelect>



        <MudSelect T="string" @bind-Text="@assignedTo" Label="Assigned To">


            @if (peeps != null)
            {
            foreach ( var item in peeps )
            {
            <MudSelectItem Value=@item.id.ToString()>@item.firstname @item.lastname</MudSelectItem>
            }
            }

            @*<MudSelectItem Value="@("Bob")" />
            <MudSelectItem Value="@("Mike")" />
            <MudSelectItem Value="@("Dork")" />
            <MudSelectItem Value="@("Pig")" />*@


        </MudSelect>



            <MudItem xs="12" sm="6" md="4">
                <MudDatePicker Label="Date Discovered" @bind-Date="discoverydate" />
            </MudItem>

            <MudSelect T="string" @bind-Text="@projectText" Label="Project">
                <MudSelectItem Value="@("Movie Inventory Program")" />
                <MudSelectItem Value="@("In Stock Alert Program")" />
                <MudSelectItem Value="@("The Blogging PRogram ")" />
                <MudSelectItem Value="@("The Best Ever Video Game")" />
            </MudSelect>


            <MudSelect T="string" @bind-Text="@lifeCycleText" Label="Life Cycle">
                <MudSelectItem Value="@("Open")" />
                <MudSelectItem Value="@("In Progress")" />
                <MudSelectItem Value="@("Not a Bug")" />
                <MudSelectItem Value="@("Not reproducible")" />
                <MudSelectItem Value="@("Missing Information")" />
                <MudSelectItem Value="@("Pushed Back")" />
                <MudSelectItem Value="@("Ready for next release")" />
                <MudSelectItem Value="@("Ready for next retest")" />
                <MudSelectItem Value="@("Fix not confirmed")" />
                <MudSelectItem Value="@("Closed")" />
                <MudSelectItem Value="@("Fixed")" />
                <MudSelectItem Value="@("On Hold")" />
                <MudSelectItem Value="@("Duplicate bug")" />
            </MudSelect>


            <div class="d-flex">
                <MudRadioGroup T="string" @bind-SelectedOption="@priorityText" Required="true" RequiredError="Priority">
                    <MudRadio Option="@("Low")">Low</MudRadio>
                    <MudRadio Option="@("Medium")">Medium</MudRadio>
                    <MudRadio Option="@("High")">High</MudRadio>
                    <MudRadio Option="@("Urgent")">Urgent</MudRadio>
                </MudRadioGroup>
            </div>

            @*<MudItem xs="12" sm="6" md="4">
                    <MudDatePicker Label="Target Resolution Date" @bind-Date="resolutiondate" />
                </MudItem>*@



            @*<MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" @bind-Text="@progressReport" Label="Progress Report" Variant="Variant.Text"  Lines="5" />
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" @bind-Text="@resolutionText"  Label="Resolution Summary" Variant="Variant.Text"  Lines="5" />
                </MudItem>*@






            @*<MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                Label="I agree that MudBlazor is awesome!" />*@


        </MudForm>
    </MudCardContent>
    <MudCardActions>
        @*<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Submit Bug</MudButton>*@
        <MudButton Variant="Variant.Filled" OnClick="BugSubmit" Color="Color.Primary" Class="ml-auto">Submit Bug</MudButton>
    </MudCardActions>




</MudCard>

@*@if (resultstring != null)
    {
        <h1>@resultstring</h1>

    }
    else
    {
        <h1>Result String is null</h1>
    }*@



@code { //https://www.donedone.com/blog/bug-tracking-template
    bool success;


    string selecteduser;
    string assignedTo;


    string fart = "FART";

    string reportText = "NA";
    string summaryText = "NA";
    string detailsText = "NA";
    DateTime? discoverydate = DateTime.Today;
    DateTime? resolutiondate = DateTime.Today;
    string progressReport = "NA";
    string projectText = "NA";
    string firstname = "NA";
    string lastname = "NA";

    string[] errors = { };
    string resultstring = "";
    string resolutionText = "NA";
    string priorityText = "NA";
    string lifeCycleText = "NA";
    List<Person> peeps = new();

    [Parameter]
    public string bugid { get; set; }


    //  HttpResponseMessage result;
    //    MudTextField<string> pwField1;
    MudForm form;
    //  Bug bug = new();




    public string Text { get; set; } = "????";
    public string ButtonText { get; set; } = "Click Me";
    public int ButtonClicked { get; set; }

    void ButtonOnClick()
    {
        ButtonClicked += 1;
        Text = $"Awesome x {ButtonClicked}";
        ButtonText = "Click Me Again";
    }


    Bug newbug;
    Person person;
    Person assignedtoperson;

    protected override async Task OnInitializedAsync()
    {
        peeps = await Http.GetFromJsonAsync<List<Person>>("BugManage/GetPeople/");

        if (bugid != null)
        {
            Snackbar.Add("bug id is " + bugid);
            newbug = await Http.GetFromJsonAsync<Bug>("BugManage/GetBug/" + bugid);


            Snackbar.Add("the selected newbug  person is " + newbug.personAssigned.firstname);
            Snackbar.Add("the selected newbug assignee is " + newbug.personAssigned.firstname);


            //This is the user that discovered the bug.
            if (newbug.personAssigned != null)
            {
                person = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + newbug.personAssigned.id);  //we have the original bug id here
                                                                                                          //   person = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + selecteduser);
                newbug.personAssigned = person;
                selecteduser = person.id.ToString();

            }else
            {
                Snackbar.Add("the selected newbug person is null");
            }

            //This is the user that is assigned to the bug.
            if (newbug.personAssigned != null)
            {
                assignedtoperson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + newbug.personAssigned.id);  //we have the original bug id here
                                                                                                                        //    assignedtoperson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + assignedTo);
                newbug.personAssigned = assignedtoperson;
                assignedTo = assignedtoperson.id.ToString();

            }
            else
            {
                Snackbar.Add("the selected assignee person is null");
            }


            summaryText = newbug.summary;
            detailsText = newbug.description;
            projectText = newbug.project.name;
            firstname = newbug.personAssigned.firstname;
            priorityText = newbug.priority;
            lifeCycleText = newbug.lifecycle;


        }
    }



    private async Task EditPerson(Person person)
    {
        // / BugManage / GetPeople
        Console.WriteLine(person.firstname);
    }

    private async Task BugSubmit()
    {

        //This is the user that discovered the bug.
        if (selecteduser != null)
        {
            Snackbar.Add("Searching for person at id: " + selecteduser);
            person = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + selecteduser); //we want to update the person from the html selection
            newbug.personAssigned = person;
            Snackbar.Add("the selected person is " + person.firstname);
        }

        //This is the user that is assigned to the bug.
        if (assignedTo != null)
        {
            Snackbar.Add("Searching for assignedto at id: " + assignedTo);

            if (assignedtoperson == null) assignedtoperson = new();
            assignedtoperson = await Http.GetFromJsonAsync<Person>("BugManage/GetPerson/" + assignedTo); //we want to update the assignedperson from the html selection
            newbug.personAssigned = assignedtoperson;
            Snackbar.Add("the selected assignee is " + person.firstname);

        }





        //summaryText = newbug.summary;
        //detailsText = newbug.description;
        //projectText = newbug.project.name;
        //firstname = newbug.personAssigned.firstname;
        //priorityText = newbug.priority;
        //lifeCycleText = newbug.lifecycle;
        //assignedTo = newbug.personAssigned.id.ToString();
        //selecteduser = newbug.personAssigned.firstname;

        newbug.created = discoverydate.Value;
        newbug.description = detailsText;
        newbug.summary = summaryText;
        newbug.status = priorityText;
        newbug.lifecycle = lifeCycleText;

        Project project = new Project();
        project.name = projectText;
        newbug.project = project;

        //Snackbar.Add("newbug person is " + newbug.personAssigned.id);
        //Snackbar.Add("newbug assignee is " + newbug.personAssigned.id);


        Snackbar.Add("Submitting bug with assignedto firstname is: " + newbug.personAssigned.firstname);
        Snackbar.Add("Submitting bug with selecteduser firstname is: " + newbug.personAssigned.firstname);

        var result = await Http.PostAsJsonAsync("BugManage/MakePostAgain", newbug);
        //    resultstring = await result.Content.ReadAsStringAsync();
        resultstring = result.StatusCode.ToString();

        if (resultstring == "OK")
        {
            Snackbar.Add("Success!");
        }


        this.StateHasChanged();

    } }