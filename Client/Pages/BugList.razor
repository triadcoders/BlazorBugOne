@using System.Net.Http.Json

@using BlazorBugOne.Shared;

@inject HttpClient Http
@using System.Threading;
@inject ISnackbar Snackbar



@inject HttpClient httpClient
@inject NavigationManager NavigationManager


@page "/BugList"

<MudTable Items="@bugs" Hover="true" SortLabel="Sort By" Dense=true CommitEditTooltip="Save">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x=>x.id)">BugId#</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x=>x.summary)">Bug Summary</MudTableSortLabel></MudTh>
        @*<MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x=>x.progressreport)">Progress Report</MudTableSortLabel></MudTh>*@
        <MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x => x.project?.name)">Project Name</MudTableSortLabel></MudTh>
        @*<MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x=>x.targetdate)">Target Completion Date</MudTableSortLabel></MudTh>*@
        <MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x => x.personAssigned?.firstname)">Assigned To</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x => x.priority)">Priority</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Bug, object>(x => x.lifecycle)">Life Cycle</MudTableSortLabel></MudTh>
        <MudTh>Edit</MudTh>
        <MudTh>Delete</MudTh>
        @*<MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<Element, object>(x=>x.Sign)">Sign</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Element, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Position)">Position</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Molar)">Mass</MudTableSortLabel></MudTh>*@
    </HeaderContent>
    <RowTemplate>
        <MudTd @onclick="@(() => DoThing(@context))" DataLabel="bugid">@context.id</MudTd>
        @*<MudTd DataLabel="description">@context.description</MudTd>*@
        <MudTd DataLabel="summary">@context.summary</MudTd>
        <MudTd DataLabel="project">@context.project?.name</MudTd>
        @*<MudTd DataLabel="targetdate">@context.targetdate</MudTd>*@
        <MudTd DataLabel="firstname">@context.personAssigned?.firstname @context.personAssigned?.lastname </MudTd>
        <MudTd DataLabel="priority">@context.priority</MudTd>
        <MudTd DataLabel="lifecycle">@context.lifecycle</MudTd>
        <MudTd><MudButton Disabled="@enabled" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DoThing(context))">Edit</MudButton></MudTd>
        
        
        @*<MudTd><MudButton Disabled="@enabled" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteBug(context))">Delete</MudButton></MudTd>*@
        <MudTd><MudButton Disabled="@enabled" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => Delete(context.id))">Delete New</MudButton></MudTd>


        @*<MudTd><MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => OpenDialog2(context.id))">Delete</MudButton></MudTd>*@

        @*<MudTd>
            <br />
            <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="@context.summary"  @onclick="@(() => DoThing(@context))" Label="Bug Summary" />
        </MudTd>*@

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

@*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>*@
@*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable Admin Mode</MudSwitch>*@
@*<MudSwitch @onclick="() => FixToggle(enabled.ToString())" @bind-Checked="@enabled" Color="Color.Default" Label="@(!enabled ? "Admin" : "User")" />*@
<MudSwitch  @bind-Checked="@enabled" Color="Color.Default" Label="@(!enabled ? "Admin" : "User")" />

@*<h1>@alert</h1>*@

<MudDialog @bind-IsVisible="cansee">
    <DialogContent>
        <MudText>Confirm you want to delete bug with id: @bugtodeleteid</MudText>
        <MudText>This cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteBug(bugtodeleteid))">DELETE THE BUG</MudButton>
    </DialogActions>
</MudDialog>

@code { 

    [Parameter]
    public int bugid { get; set; }

    Bug bug;
    int bugtodeleteid;
    bool cansee = false;

    // MudTable<Bug> _table;
    // private EventCallback<ICollection<Bug>> TableChanged { get; set; }
    private EventCallback<ICollection<Bug>> TableChanged { get; set; }
    string alert = "NA";
    private bool enabled = false;
    private IEnumerable<Bug> bugs = new List<Bug>();


    void Cancel() => cansee = false;


    protected override async Task OnInitializedAsync()
    {
        bugs = await httpClient.GetFromJsonAsync<List<Bug>>("BugManage/GetBugs");
        //foreach (var item in bugs)
        //{
        //    if (item.person != null)
        //    {
        //        Console.WriteLine("Person name is " + item.person.firstname);
        //    }
        //}
    }

    string adminmode = "";

    private void FixToggle(string mystring)
    {
        enabled = !enabled;
        alert = enabled.ToString();

        if (enabled) { adminmode = "Admin"; }  else { adminmode = "User";}
    }

    private async Task DoThing(Bug bug)
    {
        // await TableChanged.InvokeAsync(bugs);
        alert = "WeeeWooo WeeeWooo " + bug.id;
        NavigationManager.NavigateTo("/SubmitBug/" + bug.id);
    }


    private async Task DeleteBug(int bugid)
    {


        // bug = await httpClient.GetFromJsonAsync<Bug>("BugManage/GetBug/"+bugid);




        //  Snackbar.Add("Trying to actually delete the bugid !!!! " + bugid);
        //   Snackbar.Add("Trying to actually delete the bug.id !!!! " + bug.id);

        // await TableChanged.InvokeAsync(bugs);
        //  alert = "WeeeWooo WeeeWooo " + bug.id;     
        //var result = await Http.PostAsJsonAsync("BugManage/DeleteBug", bug);



        foreach (var item in bugs)
        {

            if (bugid == item.id)
            {
                Snackbar.Add("I see the item has matched...trying to delete");
                var result = await Http.PostAsJsonAsync("BugManage/DeleteBug", item);
            }
        }



        cansee = false;

        //   var result = await Http.GetAsync("BugManage/DeleteBug", bug.id);
        //    var result = await Http.PostAsync("BugManage/DeleteBug", bug.id);
        // NavigationManager.NavigateTo("/MudTest/" + bug.id);

        //This will refresh the list of bugs on the screen to reflect the deleted bug.
        bugs = await httpClient.GetFromJsonAsync<List<Bug>>("BugManage/GetBugs");
        foreach (var item in bugs)
        {
            if (item.personDiscovered != null)
            {
                Console.WriteLine("Person name is " + item.personDiscovered.firstname);
            }
        }


    }


    private async Task Delete(int bugid)
    {
        cansee = true;
        //   bug = buggy;

        //if (bug == null)
        //{
        //    Snackbar.Add("I'm not sure why but the bug is null");

        //    return;
        //}
        bugtodeleteid = bugid;



        //Snackbar.Add("Attempting to delete bugid " + bug.id);


        //Console.WriteLine("Deletebug is " + bugid);


        //Snackbar.Add("Trying to delete..." + bugid);
        ////   DeleteUser();
        //var result = await httpClient.GetAsync("BugManage/DeleteBug/" + bugid);

        //Snackbar.Add(result.ReasonPhrase);

        ////   Console.WriteLine(result);
        ////  await UpDatePeople();

        //Snackbar.Add(result.ToString());
        //cansee = false;

    }


}

